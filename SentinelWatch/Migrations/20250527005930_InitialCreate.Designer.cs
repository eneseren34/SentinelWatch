// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SentinelWatch.Data;

#nullable disable

namespace SentinelWatch.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250527005930_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("SentinelWatch.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(10, 6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(10, 6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("SentinelWatch.Models.NonProfitContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("NonProfitContacts");
                });

            modelBuilder.Entity("SentinelWatch.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Humidity")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Magnitude")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("Precipitation")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Severity")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Temperature")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("WindSpeed")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("SentinelWatch.Models.ReportStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReportId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReviewTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReviewedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.HasIndex("ReviewedById");

                    b.ToTable("ReportStatuses");
                });

            modelBuilder.Entity("SentinelWatch.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SentinelWatch.Models.NonProfitContact", b =>
                {
                    b.HasOne("SentinelWatch.Models.Location", "Location")
                        .WithMany("NonProfitContacts")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("SentinelWatch.Models.Report", b =>
                {
                    b.HasOne("SentinelWatch.Models.Location", "Location")
                        .WithMany("Reports")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SentinelWatch.Models.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SentinelWatch.Models.ReportStatus", b =>
                {
                    b.HasOne("SentinelWatch.Models.Report", "Report")
                        .WithMany("StatusHistory")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SentinelWatch.Models.User", "ReviewedBy")
                        .WithMany("ReviewedStatuses")
                        .HasForeignKey("ReviewedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Report");

                    b.Navigation("ReviewedBy");
                });

            modelBuilder.Entity("SentinelWatch.Models.Location", b =>
                {
                    b.Navigation("NonProfitContacts");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("SentinelWatch.Models.Report", b =>
                {
                    b.Navigation("StatusHistory");
                });

            modelBuilder.Entity("SentinelWatch.Models.User", b =>
                {
                    b.Navigation("Reports");

                    b.Navigation("ReviewedStatuses");
                });
#pragma warning restore 612, 618
        }
    }
}
